/* eslint-disable @typescript-eslint/no-explicit-any */\n'use client';\n\nimport { useRef, useState, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\ninterface DebugARViewerProps {\n  modelPath: string;\n  deviceType: 'mobile' | 'desktop';\n}\n\nexport default function DebugARViewer({ modelPath, deviceType }: DebugARViewerProps) {\n  const [logs, setLogs] = useState<string[]>(['🎬 디버깅 시작...']);\n  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');\n  const containerRef = useRef<HTMLDivElement>(null);\n  \n  const addLog = (message: string) => {\n    const timestamp = new Date().toLocaleTimeString();\n    const logMessage = `[${timestamp}] ${message}`;\n    console.log(logMessage);\n    setLogs(prev => [...prev.slice(-10), logMessage]); // 최근 10개만 유지\n  };\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n    \n    addLog(`디바이스 타입: ${deviceType}`);\n    addLog('컨테이너 DOM 준비 완료');\n    \n    if (deviceType === 'mobile') {\n      initializeMobileDebug();\n    } else {\n      initializeDesktopDebug();\n    }\n  }, [deviceType]);\n\n  const initializeMobileDebug = async () => {\n    try {\n      addLog('📱 모바일 모드 시작');\n      \n      // 카메라 권한 체크\n      addLog('카메라 권한 확인 중...');\n      if (!navigator?.mediaDevices?.getUserMedia) {\n        throw new Error('카메라 API 지원하지 않음');\n      }\n      \n      // MindAR 라이브러리 체크\n      addLog('MindAR 라이브러리 확인 중...');\n      if (!(window as any).MindARThree) {\n        throw new Error('MindAR 라이브러리 로드되지 않음');\n      }\n      addLog('✅ MindAR 라이브러리 확인됨');\n      \n      // WebGL 지원 체크\n      const canvas = document.createElement('canvas');\n      const gl = canvas.getContext('webgl2') || canvas.getContext('webgl');\n      if (!gl) {\n        throw new Error('WebGL 지원하지 않음');\n      }\n      addLog('✅ WebGL 지원 확인됨');\n      \n      // 마커 파일 체크\n      addLog('마커 파일 확인 중...');\n      const response = await fetch('/markers/qr-marker.mind');\n      if (!response.ok) {\n        throw new Error(`마커 파일 로드 실패: ${response.status}`);\n      }\n      addLog('✅ 마커 파일 확인됨');\n      \n      // GLB 모델 파일 체크\n      addLog('GLB 모델 파일 확인 중...');\n      const modelResponse = await fetch(modelPath);\n      if (!modelResponse.ok) {\n        throw new Error(`GLB 모델 로드 실패: ${modelResponse.status}`);\n      }\n      addLog('✅ GLB 모델 파일 확인됨');\n      \n      // three-icosa 라이브러리 체크\n      try {\n        const threeIcosaModule = await import('three-icosa');\n        addLog('✅ three-icosa 라이브러리 로드됨');\n      } catch (icosaError) {\n        addLog(`⚠️ three-icosa 로드 실패: ${icosaError}`);\n      }\n      \n      addLog('🎉 모든 체크 완료 - AR 초기화 가능!');\n      setStatus('success');\n      \n    } catch (error) {\n      addLog(`❌ 에러: ${error}`);\n      setStatus('error');\n    }\n  };\n\n  const initializeDesktopDebug = async () => {\n    try {\n      addLog('🖥️ 데스크톱 모드 시작');\n      \n      // Three.js 기본 기능 체크\n      const scene = new THREE.Scene();\n      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      const renderer = new THREE.WebGLRenderer();\n      addLog('✅ Three.js 기본 객체 생성됨');\n      \n      // GLB 로더 체크\n      const loader = new GLTFLoader();\n      addLog('✅ GLTF 로더 생성됨');\n      \n      addLog('🎉 데스크톱 모드 체크 완료!');\n      setStatus('success');\n      \n    } catch (error) {\n      addLog(`❌ 에러: ${error}`);\n      setStatus('error');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black text-white p-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        <h1 className=\"text-xl font-bold mb-4\">🔧 AR 뷰어 디버그 모드</h1>\n        \n        <div className=\"mb-4\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <span>상태:</span>\n            <span className={`px-2 py-1 rounded text-xs ${\n              status === 'loading' ? 'bg-yellow-600' :\n              status === 'success' ? 'bg-green-600' : 'bg-red-600'\n            }`}>\n              {status === 'loading' ? '🔄 체크 중' :\n               status === 'success' ? '✅ 성공' : '❌ 실패'}\n            </span>\n          </div>\n          <div>디바이스: {deviceType}</div>\n          <div>모델 경로: {modelPath}</div>\n        </div>\n        \n        <div className=\"bg-gray-900 rounded p-4 h-96 overflow-y-auto\">\n          <h2 className=\"font-bold mb-2\">디버그 로그:</h2>\n          {logs.map((log, index) => (\n            <div key={index} className=\"text-sm font-mono mb-1 break-words\">\n              {log}\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"mt-4\">\n          <a \n            href=\"/ar/view/1\" \n            className=\"inline-block bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded\"\n          >\n            ← 원래 AR 뷰어로 돌아가기\n          </a>\n        </div>\n      </div>\n      \n      <div ref={containerRef} className=\"hidden\" />\n    </div>\n  );\n}\n